#%%
import plotly.express as px
import plotly
plotly.io.orca.config.executable = '/home/hx/.miniconda3/envs/combi/bin/orca'
import plotly.graph_objects as go
import numpy as np
from matplotlib import pyplot as plt
global_layout = dict(shapes=[
      
        # Line Horizontal
        go.layout.Shape(
            type="line",
            x0=2,
            y0=3,
            x1=10020,
            y1=3,
            name='t_star',
            line=dict(
                color="Red",
                width=4
            ),
        )
    ],
    title=go.layout.Title(
        text="P-Values distribution",
        xref="paper",
        x=0
    ),
    legend=go.layout.Legend(
        x=0,
        y=1
    ),
    xaxis=go.layout.XAxis(
        title=go.layout.xaxis.Title(
            text="Locus",
            font=dict(
                family="Courier New, monospace",
                size=18,
                color="#7f7f7f"
            )
        )
    ),
    yaxis=go.layout.YAxis(
        title=go.layout.yaxis.Title(
            text="-log(pvalue)",
            font=dict(
                family="Courier New, monospace",
                size=18,
                color="#7f7f7f"
            )
        )
    )
)

array = np.random.uniform(low=0, high=1, size=10020)
info = np.random.uniform(low=0, high=5, size=20 )
idx = np.random.choice(10020,20)

pts = zip(idx, info)
pts_greater = np.array([pt for pt in pts if pt[1] > 3])

pts = zip(idx, info)
pts_lower = np.array([pt for pt in pts if 1.1<= pt[1] <= 3])

fig = go.Figure(data=go.Scatter(x=np.arange(len(array)), 
                                y=array, 
                                 marker_color="#104BA9",
                                opacity=0.5,
                                name='Uninformative SNPs',
                                mode='markers'))


fig.add_trace(go.Scatter(x=pts_greater[:,0], 
                         y=pts_greater[:,1],
                         marker_color="#D9005B",
                         opacity=1.0,
                         name='Informative SNPs',
                         mode='markers'))

fig.add_trace(go.Scatter(x=pts_lower[:,0], 
                         y=pts_lower[:,1],
                         opacity=0.5,
                         marker_color="#104BA9",

                         showlegend=False,
                         mode='markers'))

fig.update_layout(    
    global_layout,
    title="Using P-Values to isolate informative SNPs")


fig.show()
#fig.write_image("/home/hx/Work/Masterarbeit/report/slides/pvalues.pdf")






#%%
import plotly.express as px
import plotly
plotly.io.orca.config.executable = '/home/hx/.miniconda3/envs/combi/bin/orca'
import plotly.graph_objects as go
import numpy as np
from matplotlib import pyplot as plt


fig2 = go.Figure(data=go.Scatter(x=np.arange(5000,5020), 
                                y=np.random.uniform(low=3, high=5, size=20 ), 
                                marker_color="#D9005B",
                                opacity=1,
                                name='Informative SNPs',
                                mode='markers'))


fig2.add_trace(go.Scatter(x=np.array([np.arange(5000), np.arange(5020,10020)]).flatten(), 
                         y=np.random.uniform(low=0, high=1, size=10000),
                         marker_color="#104BA9",
                         opacity=0.5,
                         name='Uninformative SNPs',
                         mode='markers'))


fig2.update_layout(
    global_layout,
    shapes=[
        
        go.layout.Shape(
             type="rect",
            x0=4080,
            y0=0,
            x1=5000,
            y1=5,
            opacity=0.2,
            layer='below',
            line_width=0,
            fillcolor="#104BA9",
        ),
        # filled Rectangle
        go.layout.Shape(
            type="rect",
            x0=5000,
            y0=0,
            x1=5020,
            y1=5,
            opacity=0.2,
            layer='below',
            line_width=0,
            fillcolor="#D9005B",
        ),
        
        go.layout.Shape(
            type="rect",
            x0=5020,
            y0=0,
            x1=5040,
            y1=5,
            opacity=0.2,
            layer='below',
            line_width=0,
            fillcolor="#104BA9",
        ),
    ]
)
fig2.update_xaxes(range=[4980, 5040])
fig2.show()
fig2.write_image("/home/hx/Work/Masterarbeit/report/slides/toy.pdf")


#%%
import matplotlib
colors = ["#E59F71","#BA5A31","#97A877","#69DC9E","#FF9B9B","#306448","#552917","#6E7B57"]
tpr = {}
fwer = {}
precision = {}
tpr['31'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/tpr-31-6.npy")
tpr['35'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/tpr-35-6.npy")
tpr['41'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/tpr-41-6.npy")
tpr['rpvt'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/rpvt-tpr-6.npy")
tpr['combi'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/combi-tpr-6.npy")

precision['31'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/precision-31-6.npy")
precision['35'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/precision-35-6.npy")
precision['41'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/precision-41-6.npy")
precision['rpvt'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/rpvt-precision-6.npy")
precision['combi'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/combi-precision-6.npy")

fwer['31'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/fwer-31-6.npy")
fwer['35'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/fwer-35-6.npy")
fwer['41'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/fwer-41-6.npy")
fwer['rpvt'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/rpvt-fwer-6.npy")
fwer['combi'] = np.load("/home/hx/Work/Masterarbeit/numpy_arrays_2/combi-fwer-6.npy")

figA = go.Figure(data=go.Scatter(x=fwer['combi'], 
                                y=tpr['combi'], 
                                opacity=1,
                                name='SVM Preprocessing',

                                mode='lines+markers'),
                                layout=go.Layout(
                                    legend_x=0,
                                    legend_y=0,
                                    title=go.layout.Title(
                                        text="TPR in function of FWER",
                                        xref="paper",
                                        x=0
                                    ),
                                  
                                    xaxis=go.layout.XAxis(
                                        range=[0, 0.10], 
                                        title=go.layout.xaxis.Title(
                                            text="Family-wise Error Rate",
                                        )
                                    ),
                                    yaxis=go.layout.YAxis(
                                        dtick = 0.05,
                                        range=[0,0.55],
                                        title=go.layout.yaxis.Title(
                                            text="True Positive Rate",
                                        )
                                    )
                                )
                )
figA.add_trace(go.Scatter(x=fwer['rpvt'],
                            y=tpr['rpvt'], 
                            name='Raw P-Values',
                            mode='lines+markers'))


figA.show()

figB = go.Figure(data=go.Scatter(x=fwer['combi'], 
                                y=precision['combi'], 
                                opacity=1,
                                name='SVM Preprocessing',
                                mode='lines+markers'),
                                layout=go.Layout(
                                    title="Precision in function of FWER",
                                    legend_x=0,
                                    legend_y=0,
                                    xaxis=go.layout.XAxis(
                                        range=[0, 1], 
                                        title=go.layout.xaxis.Title(
                                            text="True Positive Rate",
                                        )
                                    ),
                                    yaxis=go.layout.YAxis(
                                        dtick = 0.05,
                                        range=[0,1],
                                        title=go.layout.yaxis.Title(
                                            text="Precision",
                                        )
                                    )
                                ))
figB.add_trace(go.Scatter(x=tpr['rpvt'],
                            y=precision['rpvt'], 
                            name='RPVT',
                            mode='lines+markers'))
figB.show()

        
#figA.write_image("/home/hx/Work/Masterarbeit/report/slides/rpvt-combi-tpr.pdf")
#figB.write_image("/home/hx/Work/Masterarbeit/report/slides/rpvt-combi-precision.pdf")

figA.add_trace(go.Scatter(x=fwer['31'],
                            y=tpr['31'], 
                            name='COMBI',
                            mode='lines+markers'))

figB.add_trace(go.Scatter(x=tpr['31'],
                            y=precision['31'], 
                            name='DeepCOMBI',
                            mode='lines+markers'))



#figA.write_image("/home/hx/Work/Masterarbeit/report/slides/lrp-combi-tpr.pdf")
#figB.write_image("/home/hx/Work/Masterarbeit/report/slides/lrp-combi-precision.pdf")



